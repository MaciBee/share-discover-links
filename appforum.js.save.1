require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const mysql = require('mysql2');
const bcrypt = require('bcrypt');
const cors = require('cors');
const path = require('path');

const app = express();
app.use(cors());
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname, 'public'))); // Serve static files from 'public'

// Create a connection pool
const pool = mysql.createPool({
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0
});

// Serve the forum.html file for registration and login
app.get('/forum.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'forum.html'));
});

// Serve the ask_question.html file for the Q&A forum
app.get('/ask_question.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'ask_question.html'));
});

// Registration endpoint
app.post('/register', async (req, res) => {
    const { username, email, password } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);

    pool.query(
        'INSERT INTO users (username, email, password) VALUES (?, ?, ?)',
        [username, email, hashedPassword],
        (err, results) => {
            if (err) {
                console.error('Failed to register user:', err);
                return res.status(500).json({ message: 'Failed to register user' });
            }
            res.status(201).json({ message: 'User registered successfully' });
        }
    );
});

// Login endpoint
app.post('/login', (req, res) => {
    const { email, password } = req.body;
    pool.query(
        'SELECT * FROM users WHERE email = ?',
        [email],
        async (err, results) => {
            if (err) {
                console.error('Failed to retrieve user:', err);
                return res.status(500).json({ message: 'Failed to login' });
            }

            if (results.length > 0) {
                const comparison = await bcrypt.compare(password, results[0].password);
                if (comparison) {
                    res.json({ message: 'Login successful' });
                } else {
                    res.status(401).json({ message: 'Invalid credentials' });
                }
            } else {
                res.status(404).json({ message: 'User not found' });
            }
        }
    );
});

// Endpoint to submit a question
app.post('/questions', (req, res) => {
    const { user_id, question_text } = req.body;
    pool.query(
        'INSERT INTO Questions (user_id, question_text) VALUES (?, ?)',
        [user_id, question_text],
        (err, results) => {
            if (err) {
                console.error('Failed to submit question:', err);
                return res.status(500).json({ message: 'Failed to submit question' });
            }
            res.status(201).json({ message: 'Question submitted successfully' });
        }
    );
});

// Endpoint to get all questions
app.get('/questions', (req, res) => {
    const sqlSelect = 'SELECT * FROM Questions ORDER BY created_at DESC';
    pool.query(sqlSelect, (err, results) => {
        if (err) {
            console.error('Error fetching questions:', err);
            res.status(500).send('Error fetching questions');
            return;
        }
        res.json(results);
    });
});

// Endpoint to submit an answer
app.post('/answers', (req, res) => {
    const { question_id, answer_text, author } = req.body;
    pool.query(
        'INSERT INTO Answers (question_id, answer_text, author) VALUES (?, ?, ?)',
        [question_id, answer_text, author],
        (err, results) => {
            if (err) {
                console.error('Failed to submit answer:', err);
                return res.status(500).json({ message: 'Failed to submit answer' });
            }
            res.status(201).json({ message: 'Answer submitted successfully' });
        }
    );
});

// Endpoint to get answers for a specific question
app.get('/answers/:question_id', (req, res) => {
    const { question_id } = req.params;
    pool.query(
        'SELECT * FROM Answers WHERE question_id = ? ORDER BY created_at DESC',
        [question_id],
        (err, results) => {
            if (err) {
                console.error('Error fetching answers:', err);
                res.status(500).send('Error fetching answers');
                return;
            }
            res.json(results);
        }
    );
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});
